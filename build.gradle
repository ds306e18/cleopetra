plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building an application
    id 'application'

    id 'org.openjfx.javafxplugin' version '0.0.11'
    //id 'com.dua3.javafxgradle7plugin' version '0.0.9'

    id 'org.beryx.jlink' version '2.23.1'
}

sourceCompatibility = 11
targetCompatibility = 11

// Define the main class for the application
mainClassName = 'dk.aau.cs.ds306e18.tournament.Main'
version = '1.9.0'
applicationDefaultJvmArgs = [
        '--add-opens=java.base/java.io=com.google.gson',
        '--add-opens=java.base/java.util=com.google.gson',
]

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:26.0-jre'

    // Using GSON for serializing objects for transfer and storage
    implementation 'com.google.code.gson:gson:2.8.9'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    implementation('org.controlsfx:controlsfx:11.0.3') {
        exclude group: 'org.openjfx'
    }

    implementation 'org.rlbot.commons:rlbot-framework:3.0.0'

    implementation 'org.tomlj:tomlj:1.1.1'
}

application {
    mainModule = 'cleopetra'
}

javafx {
    version = '11'
    modules = ['javafx.controls', 'javafx.fxml']
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'CleoPetra'
        jvmArgs = [
            '--add-opens=java.base/java.io=com.google.gson',
            '--add-opens=java.base/java.util=com.google.gson',
        ]
    }

    // A lot of this stuff was borrowed from the example at https://github.com/beryx-gist/badass-jlink-example-richtextfx/blob/master/build.gradle
    jpackage {
        skipInstaller = false
        installerType = 'msi'
        icon = 'src/main/resources/cleopetra.ico'
        installerOptions = ['--win-menu', '--win-shortcut', '--win-dir-chooser', '--win-per-user-install',
        '--file-associations', 'src/main/resources/associations.properties',
        '--app-version', version]

    }
}

// Setup modules
sourceSets {
    main.resources.srcDirs = ['src/main/java']
    test.resources.srcDirs = ['src/test/java']
}

// Build a fat/uber jar
task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'dk.aau.cs.ds306e18.tournament.Main'
    }
    archiveClassifier = 'fat'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}